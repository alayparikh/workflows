AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Java Spring application with Blue/Green deployment'

Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - production
    Description: Deployment environment

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
    Default: java-spring-app-key

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    Description: EC2 instance type

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the instances will be deployed

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet ID for first zone"

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet ID for second zone"

  SkipDeploymentGroup:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Set to true to skip creation of the deployment group

Resources:
  # S3 bucket for deployment artifacts
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 30
            Prefix: !Sub '${Environment}/'

  # IAM role for EC2 instances
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt DeploymentBucket.Arn
                  - !Sub '${DeploymentBucket.Arn}/*'

  # Instance profile for EC2 instances
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  # Security group for EC2 instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Spring Boot application
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'instance-sg-${Environment}'

  # Security group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'alb-sg-${Environment}'

  # Add ingress rule for instances to allow traffic from ALB
  InstanceSGIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      Description: "Allow traffic from ALB"

  # Application load balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'java-spring-alb-${Environment}'
      Scheme: internet-facing
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'java-spring-alb-${Environment}'

  # Load balancer target group - Blue
  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'blue-tg-${Environment}'
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'blue-tg-${Environment}'

  # Load balancer target group - Green
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'green-tg-${Environment}'
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'green-tg-${Environment}'

  # ALB Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BlueTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch template for EC2 instances
  InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'java-spring-lt-${Environment}'
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'java-spring-instance-${Environment}'
              - Key: Environment
                Value: !Ref Environment
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            
            # Update system packages
            yum update -y
            
            # Install Java 11
            amazon-linux-extras install -y java-openjdk11
            
            # Install CodeDeploy agent
            yum install -y ruby wget
            cd /home/ec2-user
            wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            
            # Create application directory
            mkdir -p /opt/spring-app
            chown -R ec2-user:ec2-user /opt/spring-app
            
            # Add startup script
            cat > /etc/systemd/system/spring-app.service << 'EOF'
            [Unit]
            Description=Spring Boot Application
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/spring-app
            ExecStart=/usr/bin/java -jar /opt/spring-app/app.jar
            SuccessExitStatus=143
            TimeoutStopSec=10
            Restart=on-failure
            RestartSec=5
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Enable service but don't start it yet
            systemctl daemon-reload
            systemctl enable spring-app
            
            # Create default health check endpoint
            mkdir -p /opt/spring-app/actuator/health
            echo '{"status":"UP"}' > /opt/spring-app/actuator/health/index.html
            
            # Create temporary web server for health checks
            cat > /etc/systemd/system/health-server.service << 'EOF'
            [Unit]
            Description=Temporary Health Check Server
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/spring-app
            ExecStart=/usr/bin/python -m SimpleHTTPServer 8080
            Restart=on-failure
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            systemctl daemon-reload
            systemctl enable health-server
            systemctl start health-server

  # AutoScaling Group - Blue
  BlueAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub 'blue-asg-${Environment}'
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref InstanceLaunchTemplate
        Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref BlueTargetGroup
      Tags:
        - Key: Name
          Value: !Sub 'blue-asg-${Environment}'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub 'java-spring-app-${Environment}'
      ComputePlatform: Server

  # CodeDeploy Service Role
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
      Policies:
        - PolicyName: CodeDeployPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'ec2:*'
                Resource: '*'

  # CodeDeploy Deployment Group for Blue/Green deployment
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Condition: CreateDeploymentGroup
    DependsOn:
      - BlueAutoScalingGroup
      - LoadBalancerListener
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${Environment}-deployment-group'
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 5
        GreenFleetProvisioningOption:
          Action: COPY_AUTO_SCALING_GROUP
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 60
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !Ref LoadBalancerListener
            TargetGroups:
              - Name: !GetAtt BlueTargetGroup.TargetGroupName
              - Name: !GetAtt GreenTargetGroup.TargetGroupName
      AutoScalingGroups:
        - !Ref BlueAutoScalingGroup

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']
  CreateDeploymentGroup: !Equals [!Ref SkipDeploymentGroup, "false"]

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  DeploymentBucketName:
    Description: Name of the S3 bucket for deployment artifacts
    Value: !Ref DeploymentBucket

  CodeDeployApplicationName:
    Description: CodeDeploy application name
    Value: !Ref CodeDeployApplication

  DeploymentGroupName:
    Description: CodeDeploy deployment group name
    Value: !If [CreateDeploymentGroup, !Ref DeploymentGroup, "Deployment group was skipped"]
